# Copyright 2024 Evgenchick4434 (https://github.com/Evgenchick4434)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import pyautogui as pg
from telebot import types
import telebot
import config
import os
import time
import random
import tabulate
from info import logo
from modules import (get_date, get_weather, get_courses, get_extra_currencies, shutdown, shutdown_stop, shutdown_timer,
                     sleep_mode, screenshot_save, restart, get_current_time, console_command, alert_function, lock,
                     SMS_message, get_news, get_wiki, get_date_sign, url_shortener, encrypt, decrypt, clear_cache,
                     generate_shtrih_code)


bot = telebot.TeleBot(config.TOKEN)
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö")
item2 = types.KeyboardButton("üìö –î—Ä—É–≥–æ–µ")
item3 = types.KeyboardButton("üñºÔ∏è –ú–µ–¥–∏–∞")
item4 = types.KeyboardButton("üìÇ –§–∞–π–ª—ã")
markup.add(item4, item2, item3, item1)

print(logo)

@bot.message_handler(commands=['start'])
def privet(message):
    user_id_telegram = message.from_user.id
    if user_id_telegram in config.whitelist:
#        sti = open('static/yuhu.webm', 'rb')
#        bot.send_sticker(message.chat.id, sti)
        if get_date() != '1 –°–µ–Ω—Ç—è–±—Ä—è' and get_date() != '2 –°–µ–Ω—Ç—è–±—Ä—è' and get_date() != '3 –°–µ–Ω—Ç—è–±—Ä—è':
            hourglass_message = bot.send_message(message.chat.id, get_date_sign())

        if get_date() == '1 –°–µ–Ω—Ç—è–±—Ä—è' or get_date() == '2 –°–µ–Ω—Ç—è–±—Ä—è':
            shufutinsky_calc = random.randint(0, 5)
            if shufutinsky_calc == 0:
                shufut = open('static/what_date_is_soon.jpg', 'rb')

            elif shufutinsky_calc == 2:
                shufut = open('static/kradetsya.jpg', 'rb')

            elif shufutinsky_calc == 3:
                shufut = open('static/uzhe mozhno.jpg', 'rb')

            elif shufutinsky_calc == 4:
                shufut = open('static/syet_v_dver.jpg', 'rb')

            elif shufutinsky_calc == 1:
                shufut = open('static/on yzhe blizko.jpg', 'rb')

            shufut_message = bot.send_photo(message.chat.id, shufut)

        elif get_date() == '3 –°–µ–Ω—Ç—è–±—Ä—è':
            shufutinsky_calc = random.randint(0, 4)

            if shufutinsky_calc == 0:
                shufut = open('static/kakoe tam chiclo.jpg', 'rb')

            elif shufutinsky_calc == 1:
                shufut = open('static/shufutinov_den.jpg', 'rb')

            elif shufutinsky_calc == 2:
                shufut = open('static/kogda prevernyl.jpg', 'rb')

            elif shufutinsky_calc == 3:
                shufut = open('static/kak zhe ya vas segodnya.jpg', 'rb')

            elif shufutinsky_calc == 4:
                shufut = open('static/pereverni.jpg', 'rb')

            elif shufutinsky_calc == 5:
                shufut = open('static/perevernul.jpg', 'rb')

            shufut_message = bot.send_photo(message.chat.id, shufut)




        bot.send_message(message.chat.id, f'üñê –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n<b>‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\nüìÖ –Ø –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É –∏ —Å–Ω–æ–≤–∞ <b>{get_date()}</b>\n\nüïò –ù–∞ —á–∞—Å–∞—Ö <b>{get_current_time()}</b>\n\n<i>{get_weather()}</i>\n\n<b>{get_courses()}</b>'.format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
        if get_date() != '1 –°–µ–Ω—Ç—è–±—Ä—è' and get_date() != '2 –°–µ–Ω—Ç—è–±—Ä—è' and get_date() != '3 –°–µ–Ω—Ç—è–±—Ä—è':
            bot.delete_message(message.chat.id, hourglass_message.message_id)


        elif get_date() == '1 –°–µ–Ω—Ç—è–±—Ä—è' or get_date() == '2 –°–µ–Ω—Ç—è–±—Ä—è' or get_date() == '3 –°–µ–Ω—Ç—è–±—Ä—è':
            bot.delete_message(message.chat.id, shufut_message.message_id)

    else:
        bot.send_message(message.chat.id, "‚ùå –í–∞—Å –Ω–µ—Ç—É –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –æ–Ω –Ω–µ –¥–ª—è –≤–∞—Å...")

@bot.message_handler(content_types=['text'])
def otvet(message):
    if message.chat.id in config.whitelist:
        if message.chat.type == 'private':
            if message.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö':
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("üö´ –í—ã–∫–ª—é—á–µ–Ω–∏–µ", callback_data='shutdown')
                item2 = types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data='restart')
                item3 = types.InlineKeyboardButton("‚åõ –¢–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", callback_data='shutdown_timer')
                item4 = types.InlineKeyboardButton("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data='lock')
#                item5 = types.InlineKeyboardButton("üò¥ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º", callback_data='sleep_mode')
#                item6 = types.InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data='sms_message')
                item7 = types.InlineKeyboardButton("üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='alert')
                item8 = types.InlineKeyboardButton("üñ•Ô∏è –ö–æ–º–∞–Ω–¥–∞", callback_data='console_command')
                item9 = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞", callback_data='shutdown_stop')
                item10 = types.InlineKeyboardButton("üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot')

                markup.add(item1, item2, item3, item4, item7, item8, item10, item9)

                bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

            elif message.text == 'üìö –î—Ä—É–≥–æ–µ':
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("üß† –í–∏–∫–∏–ø–µ–¥–∏—è", callback_data='wikipedia')
                item2 = types.InlineKeyboardButton("üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='extra_currency_courses')
                item3 = types.InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='news')
                item4 = types.InlineKeyboardButton("üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å URL", callback_data='url_shortener')
                markup.add(item1, item3, item2, item4)

                bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ:", reply_markup=markup)

            elif message.text == 'üñºÔ∏è –ú–µ–¥–∏–∞':
                markup = types.InlineKeyboardMarkup(row_width=3)
                item1 = types.InlineKeyboardButton("‚èØ", callback_data='pause')
                item2 = types.InlineKeyboardButton("‚ûñ üîä", callback_data='volume_minus')
                item3 = types.InlineKeyboardButton("üîá", callback_data='disable_audio')
                item4 = types.InlineKeyboardButton("‚è™", callback_data='prevtrack')
                item5 = types.InlineKeyboardButton("‚è©", callback_data='nexttrack')
                item6 = types.InlineKeyboardButton("üîä ‚ûï", callback_data='volume_plus')
                markup.add(item4, item1, item5, item3, item2, item6)

                bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

            elif message.text == 'üìÇ –§–∞–π–ª—ã':
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='file_transfer')
                item2 = types.InlineKeyboardButton("üìÅ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫", callback_data='explorer')
#                item3 = types.InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data='process_list')
                item4 = types.InlineKeyboardButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data='encrypt')
                item5 = types.InlineKeyboardButton("üîë –î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data='decrypt')
                markup.add(item1, item2, item4, item5)

                bot.send_message(message.chat.id, 'üëá –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω–æ–µ:', reply_markup=markup)

            elif message.text == '/about':
                bot.send_message(message.chat.id, "üêç <u><i>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏</i></u>:\n\n<b><a href='https://github.com/Evgenchick4434'>Evgenchick4434</a></b><i> - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –¥–∏–∑–∞–π–Ω–µ—Ä.</i>\n<b><a href='https://github.com/Georgyrs'>Georgy</a></b><i> - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –±—Ä–∞—Ç–æ–∫ –∫–æ—Ä–æ—á–µ)</i>\n\n<b>ü™≤ –ù–∞—à–ª–∏ –±–∞–≥? <a href='https://forms.gle/AofqpZNgES5f5RBp7'>–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ</a></b>\n<b>‚ù§Ô∏è –õ—É—á—à–∏–º –ø–æ–¥–∞—Ä–∫–æ–º –¥–ª—è –º–µ–Ω—è –±—É–¥–µ—Ç —Ç–≥ –ø—Ä–µ–º: @Evgenchick4434</b>".format(message.from_user, bot.get_me()), parse_mode='html')

            elif message.text == '/help':
                bot.send_message(message.chat.id, "<b>üõü –ü–æ–º–æ—â—å</b>\n\nüëâ /start <i>- –ï—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏</i>\nüëâ /clear_cache <i>- –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –±–æ—Ç–∞</i>\nüëâ /about <i>- –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö</i>\nüëâ /generate_code <i>- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∏–ª–∏ —à—Ç—Ä–∏—Ö –∫–æ–¥</i>\n\nü™≤<a href='https://forms.gle/AofqpZNgES5f5RBp7'><b>–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ</b></a>".format(message.from_user, bot.get_me()), parse_mode='html')

            elif message.text == '/clear_cache':
                bot.send_message(message.chat.id, clear_cache())

            elif '/key' in message.text:

                def process_key_command(command):

                    if command.startswith('/key '):
                        ready_command = command[5:]
                        pg.press(ready_command)
                        bot.send_message(message.chat.id, f'‚úÖ –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É <b>{ready_command}</b>',
                                         parse_mode='html')

                    elif command == '/key':
                        bot.send_message(message.chat.id, 'üëá –í–≤–µ–¥–∏—Ç–µ <b>–∫–Ω–æ–ø–∫—É</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∂–∞—Ç—å:',
                                         parse_mode='html')
                        bot.register_next_step_handler(message, process_key_step)

                    else:
                        bot.send_message(message.chat.id, '<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!</b>\n\n<i>–ß—Ç–æ–±—ã'
                                                          ' –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</i>\n\n'
                                                          '<code>/key –ö–ù–û–ü–ö–ê</code><i><b> - –ó–∞–º–µ–Ω–∏—Ç–µ –ö–ù–û–ü–ö–ê –Ω–∞ –∫–Ω–æ–ø–∫—É,'
                                                          ' –Ω–∞'
                                                          ' –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å.</b></i>\n<code>/key</code><i><b>'
                                                          ' - –ó–∞–ø—Ä–æ—Å–∏—Ç'
                                                          ' –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</b></i>\n\n<b>'
                                                          'üõü –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?'
                                                          '</b> /help', parse_mode='html')

                process_key_command(message.text)

            elif message.text == '/generate_code':
                markup = types.InlineKeyboardMarkup(row_width=1)

                item1 = types.InlineKeyboardButton("[üî≤] QR –∫–æ–¥", callback_data='gen_qr')
                item2 = types.InlineKeyboardButton("[«Å|‚ïëI] –®—Ç—Ä–∏—Ö –∫–æ–¥", callback_data='gen_shtrih')
                markup.add(item1,item2)

                bot.send_message(message.chat.id, '<b>üëá –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–¥–∞:</b>',
                                 parse_mode='html', reply_markup=markup)

            else:
                pass
    else:
        bot.send_message(message.chat.id, "‚ùå –í–∞—Å –Ω–µ—Ç—É –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –æ–Ω –Ω–µ –¥–ª—è –≤–∞—Å...")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'shutdown':
                shutdown()
                bot.send_message(call.message.chat.id, "‚úÖ –í—ã–∫–ª—é—á–∞—é –ü–ö...")

            elif call.data == 'restart':
                restart()
                bot.send_message(call.message.chat.id, "‚åõ")
                bot.send_message(call.message.chat.id, "‚åõ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ü–ö...")

            elif call.data == 'lock':
                lock()
                bot.send_message(call.message.chat.id, "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ü–ö")

            elif call.data == 'sleep_mode':
                sleep_mode()
                bot.send_message(call.message.chat.id, "üí§")
                bot.send_message(call.message.chat.id, "üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")

            elif call.data == 'shutdown_stop':
                shutdown_stop()
                bot.send_message(call.message.chat.id, "‚ùé –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö")

            elif call.data == 'screenshot':
                screenshot_save()
                time.sleep(0.5)
                screenshot = open(f'user_files/screenshot.png', 'rb')
                bot.send_photo(call.message.chat.id, screenshot)

            elif call.data == 'shutdown_timer':
                bot.send_message(call.message.chat.id, '‚åõ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:')
                bot.register_next_step_handler(call.message, process_timer_step)

            elif call.data == 'alert':
                bot.send_message(call.message.chat.id, 'üí¨ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:')
                bot.register_next_step_handler(call.message, process_alert_step)

            elif call.data == 'sms_message':
                bot.send_message(call.message.chat.id, 'üí¨ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:')
                bot.register_next_step_handler(call.message, process_msg_step)

            elif call.data == 'console_command':
                bot.send_message(call.message.chat.id, 'üñ•Ô∏è –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:')
                bot.register_next_step_handler(call.message, process_cmd_step)

            elif call.data == 'extra_currency_courses':
                hourglass_message = bot.send_message(call.message.chat.id, get_date_sign())

                extra_currencies_result = get_extra_currencies().format(bot.get_me())

                bot.send_message(call.message.chat.id, extra_currencies_result, parse_mode='html')

                bot.delete_message(call.message.chat.id, hourglass_message.message_id)

            elif call.data == 'wikipedia':
                bot.send_message(call.message.chat.id, "üåè –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
                bot.register_next_step_handler(call.message, process_wikipedia_step)

            elif call.data == 'news':
                time_message = bot.send_message(call.message.chat.id, get_date_sign())

                bot.send_message(call.message.chat.id, f'<b><i>üìú –ù–æ–≤–æ—Å—Ç–∏ —Å –•–∞–±—Ä–∞:</i></b>\n\n{get_news()}', parse_mode='html')
                bot.delete_message(call.message.chat.id, time_message.message_id)

            elif call.data == 'pause':
                pg.press('playpause')

            elif call.data == 'nexttrack':
                pg.press('nexttrack')

            elif call.data == 'prevtrack':
                pg.press('prevtrack')

            elif call.data == 'disable_audio':
                pg.press('volumemute')

            elif call.data == 'volume_minus':
                pg.press('volumedown')

            elif call.data == 'volume_plus':
                pg.press('volumeup')

            elif call.data == 'file_transfer':
                bot.send_message(call.message.chat.id, "üì§ –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏")
                bot.register_next_step_handler(call.message, process_document_step)

            elif call.data == 'explorer':
                bot.send_message(call.message.chat.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                bot.register_next_step_handler(call.message, process_explorer_input)

            elif call.data == 'url_shortener':
                bot.send_message(call.message.chat.id, 'üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:')
                bot.register_next_step_handler(call.message, process_short_url_step)

            elif call.data == 'encrypt':
                bot.send_message(call.message.chat.id, 'üëá<b> –û—Ç–ø—Ä–∞–≤—å –î–û–ö–£–ú–ï–ù–¢ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è </b><i>(–¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤'
                                                       ' –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –º–æ–≥—É—Ç –Ω–µ –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã'
                                                       ')</i>:', parse_mode='html')
                bot.register_next_step_handler(call.message, process_encrypt_step)

            elif call.data == 'decrypt':
                bot.send_message(call.message.chat.id, 'üëá<b> –û—Ç–ø—Ä–∞–≤—å –î–û–ö–£–ú–ï–ù–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏</b> <i>(–¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤'
                                                       ' –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –º–æ–≥—É—Ç –Ω–µ –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã'
                                                       '):</i>\n\n<b>P.S. –¢–∞–∫ –∂–µ –≤–∞–∂–Ω–æ, —á—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ</b>', parse_mode='html')
                bot.register_next_step_handler(call.message, process_decrypt_step)

            elif call.data == 'gen_shtrih':
                bot.send_message(call.message.chat.id, 'üëá –û—Ç–ø—Ä–∞–≤—å —Ü–∏—Ñ—Ä—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —à—Ç—Ä–∏—Ö –∫–æ–¥:')
                bot.register_next_step_handler(call.message, process_shtrih_step)



    except Exception as e:
        print(repr(e))


def process_timer_step(message):
    try:
        timer_time = int(message.text)
        shutdown_timer(timer_time)
        bot.send_message(message.chat.id, f'‚è∞ –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timer_time} —Å–µ–∫—É–Ω–¥.')
    except Exception as e:
        bot.send_message(message.chat.id, f'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}', parse_mode='html')

def process_alert_step(message):
    alert_text = message.text
    alert_function(alert_text)
    bot.send_message(message.chat.id, f'üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {alert_text}')

def process_msg_step(message):
    msg_text = message.text
    SMS_message(msg_text)
    bot.send_message(message.chat.id, f'üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {msg_text}')

def process_cmd_step(message):
    try:
        cmd_command = message.text
        console_command(cmd_command)
        bot.send_message(message.chat.id, f'‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd_command}')
    except:
        bot.send_message(message.chat.id, f'‚ö†Ô∏è –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–æ—è—Ç–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è')

def process_wikipedia_step(message):

        result = get_wiki(message)

        bot.send_message(message.chat.id, result, parse_mode='html')

def process_document_step(message):
    try:
        if message.document:

            file_info = bot.get_file(message.document.file_id)

            downloaded_file = bot.download_file(file_info.file_path)

            save_path = os.path.join(f'{config.transfer_folder}', message.document.file_name)

            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            bot.send_message(message.chat.id, "üì® –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª")
    except:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def process_explorer_input(message):
    try:
        user_input_path = message.text.strip()

        if os.path.exists(user_input_path):
            os.chdir(user_input_path)
            files_and_folders = os.listdir()
            table = tabulate.tabulate([(item,) for item in files_and_folders], headers=["–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"])
            bot.send_message(message.chat.id, f"```\n{table}\n```", parse_mode="markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def process_short_url_step(message):
    try:
        url = message.text
        short_url = url_shortener(url)

        bot.send_message(message.chat.id, f'<b>üëâ –í–∞—à–∞ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n</b> <code>{short_url}</code>', parse_mode='html')

    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


def process_encrypt_step(message):
    try:
        file_to_encrypt = message.document
        filename = file_to_encrypt.file_name
        file_id = file_to_encrypt.file_id
        file_path = f'user_files/{filename}'

        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        hourglass_message = bot.send_message(message.chat.id, "‚è≥")

        time.sleep(10)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.send_message(message.chat.id, 'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:')
        bot.delete_message(message.chat.id, hourglass_message.message_id)


        bot.register_next_step_handler(message, lambda msg: process_encrypt_step2(msg, file_path, filename))
    except Exception as e:
        if e == r"'NoneType' object has no attribute 'file_name'":
            bot.send_message(message.chat.id, f'‚ùå –≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.')
        else:
            bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


def process_encrypt_step2(message, file_path, filename, password=None):
    try:
        if password is None:
            password = message.text

        encrypt(filename, password)

        hourglass_message = bot.send_message(message.chat.id, "‚å®Ô∏è")

        time.sleep(10)

        encrypted_file_to_send = open(f'user_files/encrypted_{filename}.aes', 'rb')
        bot.send_document(message.chat.id, encrypted_file_to_send)

        bot.delete_message(message.chat.id, hourglass_message.message_id)


    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

def process_decrypt_step(message):
    try:
        file_to_decrypt = message.document
        filename = file_to_decrypt.file_name
        file_id = file_to_decrypt.file_id
        file_path = f'user_files/{filename}'

        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hourglass_message = bot.send_message(message.chat.id, "‚è≥")
        time.sleep(10)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.send_message(message.chat.id, 'üîì –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:')
        bot.delete_message(message.chat.id, hourglass_message.message_id)

        bot.register_next_step_handler(message, lambda msg: process_decrypt_step2(msg, file_path, filename))
    except Exception as e:
        if e == r"'NoneType' object has no attribute 'file_name'":
            bot.send_message(message.chat.id, f'‚ùå –≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.')
        else:
            bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


def process_decrypt_step2(message, file_path, filename, password=None):
    try:
        if password is None:
            password = message.text

        decrypt(filename, password)
        hourglass_message = bot.send_message(message.chat.id, "‚å®Ô∏è")
        time.sleep(10)

        decrypted_file_to_send = open(f'user_files/decrypted_{filename[:-4][10:]}')

        bot.send_document(message.chat.id, decrypted_file_to_send)
        bot.delete_message(message.chat.id, hourglass_message.message_id)
    except Exception as e:
        if e == r"[Errno 2] No such file or directory: 'user_files/decrypted_'":
            bot.send_message(message.chat.id, '‚ùå –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–≤–æ–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –±—ã–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –Ω–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ')
        else:
            bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

def process_key_step(message):
    try:
        key = message.text

        pg.press(key)
        bot.send_message(message.chat.id, f'‚úÖ –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É <b>{key}</b>', parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

def process_shtrih_step(message):
    def is_valid_ean13(code):
        if len(code) != 13 or not code.isdigit():
            return False
        factors = [1, 3] * 6
        total = sum(int(digit) * factor for digit, factor in zip(code[:12], factors))
        checksum = (10 - (total % 10)) % 10
        return checksum == int(code[-1])

    def process_message(message):  # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç message
        if hasattr(message, 'text') and message.text and any(char.isdigit() for char in message.text):
            code = ''.join(char for char in message.text if char.isdigit())
            if is_valid_ean13(code):
                generate_shtrih_code(code)
                time.sleep(1)
                barcode_image = open('user_files/barcode.png', 'rb')
                bot.send_photo(message.chat.id, barcode_image, caption=f'–í–∞—à–µ <b>—à—Ç—Ä–∏—Ö –∫–æ–¥</b> —Å —Ü–∏—Ñ—Ä–∞–º–∏ <code>{message.text}</code>', parse_mode='html')
                time.sleep(1)
                barcode_image.close()
            else:
                bot.send_message(message.chat.id, f'‚ùå –í–∞—à –Ω–∞–±–æ—Ä —Ü–∏—Ñ—Ä <i>–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç</i> <b>—Ñ–æ—Ä–º–∞—Ç—É EAN-13</b>\n\nüëâ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>13</b> —Ü–∏—Ñ—Ä!',
                                 parse_mode='html')
        else:
            bot.send_message(message.chat.id, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç.</b>',
                             parse_mode='html')

    process_message(message)



bot.polling(none_stop=True)