# Copyright 2024 Evgenchick4434 (https://github.com/Evgenchick4434)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import time
import datetime
import plyer
import locale
import wikipedia
from bs4 import BeautifulSoup as BS
import requests
import os
import pyautogui as pg
import pyscreenshot
import html
import random
from config import Console_log


def get_date():
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

    current_date = datetime.datetime.now()

    formatted_date = current_date.strftime("%d %B")

    month_names = {'—è–Ω–≤–∞—Ä—å': '–Ø–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—å': '–§–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç': '–ú–∞—Ä—Ç–∞',
                   '–∞–ø—Ä–µ–ª—å': '–ê–ø—Ä–µ–ª—è', '–º–∞–π': '–ú–∞—è', '–∏—é–Ω—å': '–ò—é–Ω—è',
                   '–∏—é–ª—å': '–ò—é–ª—è', '–∞–≤–≥—É—Å—Ç': '–ê–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—å': '–°–µ–Ω—Ç—è–±—Ä—è',
                   '–æ–∫—Ç—è–±—Ä—å': '–û–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—å': '–ù–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—å': '–î–µ–∫–∞–±—Ä—è'}
    words = formatted_date.split()
    last_word = words[-1].lower()
    if last_word in month_names:
        words[-1] = month_names[last_word]
        formatted_date = ' '.join(words)

    if Console_log == True:
        print(f'–ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞: {formatted_date}')
    return formatted_date


unformatted_time = time.localtime()

current_time = time.strftime("%H:%M", unformatted_time)

wikipedia.set_lang('ru')

def get_weather():
    url = 'https://rp5.ru/%D0%9F%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0_%D0%B2_%D0%9A%D0%B0%D0%BB%D0%B8%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D0%B5'
    class_ = 'ArchiveTemp'

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    t = html.find(class_=class_).find(class_='t_0').text

    url = 'https://meteo7.ru/forecast/35799'
    class_ = 'descripcion wopr'     # –ö–ª–∞—Å—Å –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å (—á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–∏—Å—å)

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    w = html.find(class_=class_).find(class_='cl').text



    url = 'https://meteo7.ru/forecast/35799'
    class_ = 'descripcion wopr'     # –ö–ª–∞—Å—Å –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å (—á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–∏—Å—å)

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    osadki = html.find(class_=class_).find(class_='pr').text


    weather_emoji = 'üå¶'
    if w == '–ø–∞—Å–º—É—Ä–Ω–æ':
        weather_emoji = '‚òÅÔ∏è'
    elif w == '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
        weather_emoji = 'üåßÔ∏è'
    elif w == '—è—Å–Ω–æ':
        current_time = datetime.datetime.now().time()
        if datetime.time(20, 0) <= current_time or current_time <= datetime.time(6, 0):
            night_time = True
        else:
            night_time = False


        if night_time == False:
            weather_emoji = '‚òÄÔ∏è'
        elif night_time == True:
            weather_emoji = 'üåô'
    elif w == '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ':
        weather_emoji = 'üå§Ô∏è'
    elif w == '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
        weather_emoji = 'üå§Ô∏è'
    elif w == '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏':
        weather_emoji = 'üå§Ô∏è'


    weather = f'{weather_emoji}Ô∏è –ó–∞ –æ–∫–Ω–æ–º {t}, {w}.'

    if Console_log == True:
        print(f'–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–≥–æ–¥–∞: {weather}')
    return weather



def get_courses():
    url = 'https://www.binance.com/en-GB/price/bitcoin'
    class_ = 'css-1267ixm'

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    BTC = html.find(class_=class_).find(class_='css-1bwgsh3').text


    url = 'https://www.binance.com/en-GB/price/ethereum'
    class_ = 'css-1267ixm'

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    ETH = html.find(class_=class_).find(class_='css-1bwgsh3').text


    url = 'https://ru.investing.com/currencies/usd-rub'
    class_ = 'mb-3 flex flex-wrap items-center gap-x-4 gap-y-2 md:mb-0.5 md:gap-6'

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    USD = html.find(class_=class_).find(class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text


    currency_courses = f'[‚Çø] Bitcoin: {BTC}\n[üíé] Ethereum: {ETH}\n[üí≤] –î–æ–ª–ª–∞—Ä: ‚ÇΩ {USD}'

    if Console_log == True:
        print(f'–ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {currency_courses}')
    return currency_courses

def get_extra_currencies():
    url = 'https://www.binance.com/en-GB/price/bitcoin'
    class_ = 'css-1267ixm'

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    BTC_element = html.find(class_=class_)
    BTC = BTC_element.find(class_='css-1bwgsh3').text if BTC_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å Bitcoin"

    url = 'https://www.binance.com/en-GB/price/ethereum'
    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    ETH_element = html.find(class_=class_)
    ETH = ETH_element.find(class_='css-1bwgsh3').text if ETH_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å Ethereum"

    url = 'https://ru.investing.com/currencies/usd-rub'
    class_ = 'mb-3 flex flex-wrap items-center gap-x-4 gap-y-2 md:mb-0.5 md:gap-6'

    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    USD_element = html.find(class_=class_)
    USD = USD_element.find(
        class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text if USD_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞"

    url = 'https://ru.investing.com/currencies/try-rub'
    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    TRY_element = html.find(class_=class_)
    TRY = TRY_element.find(
        class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text if TRY_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –¢—É—Ä–µ—Ü–∫–æ–π –ª–∏—Ä—ã"

    url = 'https://ru.investing.com/currencies/eur-rub'
    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    EUR_element = html.find(class_=class_)
    EUR = EUR_element.find(
        class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text if EUR_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –ï–≤—Ä–æ"

    # –ü–∞—Ä—Å–∏–Ω–≥ –∫—É—Ä—Å–∞ TRX
    url_trx = 'https://www.binance.com/en/price/tron'
    class_trx = 'css-1267ixm'
    r_trx = requests.get(url_trx)
    html_trx = BS(r_trx.text, 'html.parser')
    trx_element = html_trx.find(class_=class_trx)
    TRX = trx_element.find(class_='css-1bwgsh3').text if trx_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å TRX"

    # –ü–∞—Ä—Å–∏–Ω–≥ –∫—É—Ä—Å–∞ TON
    url_ton = 'https://www.binance.com/en-GB/price/toncoin'
    class_ton = 'css-1267ixm'
    r_ton = requests.get(url_ton)
    html_ton = BS(r_ton.text, 'html.parser')
    ton_element = html_ton.find(class_=class_ton)
    TON = ton_element.find(class_='css-1bwgsh3').text if ton_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å TON"

    url = 'https://ru.investing.com/currencies/pln-rub'
    r = requests.get(url)
    html = BS(r.text, 'html.parser')
    PLN_element = html.find(class_=class_)
    PLN = PLN_element.find(
        class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text if PLN_element else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –ó–ª–æ—Ç–æ–≥–æ"

    extra_currency_courses = f'<b>‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>\n\n<b>[‚Çø]</b> Bitcoin: {BTC}\n[üíé] Ethereum: {ETH}\n[üí≤] –î–æ–ª–ª–∞—Ä: ‚ÇΩ {USD}\n[üí∂] –ï–≤—Ä–æ: ‚ÇΩ {EUR}\n<b>[‚Ç∫]</b> –õ–∏—Ä–∞: ‚ÇΩ {TRY}\n[üîª] TON: {TON}\n[üëë] TRX: {TRX}\n<b>[z≈Ç]</b> –ó–ª–æ—Ç—ã–π: ‚ÇΩ {PLN}'

    if Console_log == True:
        print(f'–ü–æ–ª—É—á–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {extra_currency_courses}')

    return extra_currency_courses



def alert(text, app_name, title):
    plyer.notification.notify(
        message=f'{text}',
        app_name=f'{app_name}',
        title=f'{title}', )
    if Console_log == True:
        print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: text: {text}, app_name: {app_name}, title: {title}')

def alert_function(text):
    plyer.notification.notify(
        message=f'{text}',
        app_name=f'PC controller',
        title=f'üì© –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram', )

    if Console_log == True:
        print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text}')

def SMS_message(SMS_text):
    pg.alert(f'üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {SMS_text}', '–°–æ–æ–±—â–µ–Ω–∏–µ', button="‚ùå –ó–∞–∫—Ä—ã—Ç—å")

    if Console_log == True:
        print(f'–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {SMS_text}')

def shutdown():
    if Console_log == True:
        print("–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
    os.system("shutdown /s /t 0")

def shutdown_timer(time):
    os.system(f'shutdown /s /t {time}')
    if Console_log == True:
        print(f'–ó–∞–¥–∞–Ω —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–∫ –Ω–∞ {time} —Å–µ–∫—É–Ω–¥')

def shutdown_stop():
    os.system("shutdown -a")
    if Console_log == True:
        print("–¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö –æ—Ç–º–µ–Ω—ë–Ω")

def lock():
    os.system("rundll32.exe user32.dll,LockWorkStation")
    plyer.notification.notify(
        message=f'–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —á–µ—Ä–µ–∑ Telegram',
        app_name=f'Pc Controller',
        title=f'üö´ Windows –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', )
    if Console_log == True:
     print("Windows –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")

def screenshot_save():
    scr = pyscreenshot.grab()
    scr.save('screenshots/screenshot.png')
    if Console_log == True:
        print("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

def console_command(command):
    if Console_log == True:
        print(f'–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É {command} –≤ –∫–æ–Ω—Å–æ–ª–∏...')
    os.system(f'{command}')

def restart():
    if Console_log == True:
        print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
    os.system("shutdown /r /t 0")

def sleep_mode():
    if Console_log == True:
        print("–í–∫–ª—é—á–∞—é —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
    os.system("rundll32 powrprof.dll,SetSuspendState 0,1,0")

def get_news():
    url = 'https://habr.com/ru/all/'
    response = requests.get(url).text

    data = BS(response, 'html.parser')

    news_msg = ""
    count = 0
    for article in data.find_all('h2', class_='tm-title tm-title_h2'):
        title = article.a.span.text
        link = 'https://habr.com' + article.a['href']
        news_msg += f'üëâ <b><a href="{link}">{title}</a></b>\n'
        count += 1
        if count >= 5:
            break

    if Console_log == True:
        print(f'–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ —Å –•–∞–±—Ä–∞: {news_msg}')
    return news_msg

def get_wiki(message):
    try:

        request_page = message.text
        python_page = wikipedia.page(request_page)
        escaped_url = html.escape(python_page.url)
        result = f'<b>üîé –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç—ã –∏—Å–∫–∞–ª —Å—Ç–∞—Ç—å—é:</b>\nüëâ <i><a href="{escaped_url}">{python_page.original_title}</a></i>'
    except:
        result = 'ü§î –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Ç–æ—á–Ω–µ–µ'

    if Console_log == True:
        try:
            print(f'–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç—å—è —Å –í–∏–∫–∏–ø–µ–¥–∏–∏: {python_page.original_title}')
        except:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ —Å –≤–∏–∫–∏–ø–µ–¥–∏–∏. –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    return result


def get_date_sign():
    date_sign = '‚åõ'

    if get_date() == '30 –Ø–Ω–≤–∞—Ä—è' or get_date() == '31 –Ø–Ω–≤–∞—Ä—è' or get_date() == '1 –Ø–Ω–≤–∞—Ä—è' or get_date() == '2 –Ø–Ω–≤–∞—Ä—è' or get_date() == '3 –Ø–Ω–≤–∞—Ä—è':
        random_numba = random.randint(0, 4)
        if random_numba == 0:
            date_sign = 'üéÑ'

        elif random_numba == 1:
            date_sign = 'üçä'

        elif random_numba == 2:
            date_sign = 'üéÖ'

        elif random_numba == 3:
            date_sign = '‚ùÑÔ∏è'

        elif random_numba == 4:
            date_sign = '‚òÉÔ∏è'

    if get_date() == '1 –ê–ø—Ä–µ–ª—è':
        random_number = random.randint(0, 3)
        if random_number == 0:
            date_sign = 'ü§°'

        elif random_number == 1:
            date_sign = 'üéâ'

        elif random_number == 2:
            date_sign = 'ü•≥'

        elif random_number == 3:
            date_sign = 'üéä'

    if Console_log == True:
        print(f'–ü–æ–ª—É—á–µ–Ω date_sign: {date_sign}')
    return date_sign
